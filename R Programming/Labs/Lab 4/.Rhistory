```bash
# Navigate to your "Documents" directory
mkdir 'quick-excercise'
# Create a new folder called "quick-exercise"
mkdir "quick-excercise""
# Create a new folder called "quick-exercise"
mkdir "quick-excercise"
# Navigate into the "quick-exercise" folder you just created
'''cd 'quick-exercise'
clear
clear()
load("~/R Programming/Beginning.RData")
first_ten = c(10:20)
first_ten
next_ten = c(seq(21,30))
next_ten
all_numbers = c(first_ten, next_ten)
all_numbers
eleventh = all_numbers[11]
eleventh
all_numbers[2:5]
c(seq(1,100, by = 2))
c(seq(2,100, by = 2))
all(even %% 2 == 0)
even = c(seq(2,100, by = 2))
all(even %% 2 == 0)
all(even %% 2 == 1)
phone_number = c(8,6,7,5,3,0,9)
phone_number
prefix = phone_number[1:3]
prefix
small = phone_number <= 5
small
small = c(phone_number <= 5)
small
small = phone_number[phone_number <= 5]
small
large = phone_number[phone_number > 5]
large
replace(phone_number,large, 5)
large
phone_number
replace(large, phone_number, 5)
replace(phone_number, phone_number > 5, 5)
phone_number = replace(phone_number, phone_number > 5, 5)
phone_number
replace(phone_number, phone_number %% 2 != 0, 0)
employees = paste("Employee ", 1:100)
employees
salaries = runif(40000, 50000)
salaries = runif(100, 40000, 50000)
salaries
salary_adjustments = runif(100, -5000, 10000)
salary_adjustments
employee_salaries = runif(100, 40000, 50000)
salaries = data.frame(employees, employee_salaries, salary_adjustments)
salaries
salaries = data.frame(employees, employee_salaries, salary_adjustments, stringsAsFactors = FALSE)
salaries
salaries$adjusted_salaries = salaries$employee_salaries + salaries$salary_adjustments
salaries
salaries$salary_raised = salaries$adjusted_salaries > salaries$employee_salaries
salaries
#  Q6.  Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$salary_raised = salaries$adjusted_salaries_2018 > salaries$employee_salaries
#  Q6.  Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$salary_raised = salaries$adjusted_salaries_2018 > salaries$salaries_2017
#  Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
#
#   Q18  The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
salaries
employees = paste("Employee ", 1:100)
salaries_2017 = runif(100, 40000, 50000)
salary_adjustments = runif(100, -5000, 10000)
salaries = data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
salaries$adjusted_salaries_2018 = salaries$salaries_2017 + salaries$salary_adjustments
salaries
salaries$salary_raised = salaries$adjusted_salaries_2018 > salaries$salaries_2017
salaries
salaries$employees[57:salaries$adjusted_salaries_2018]
salaries$employees[57]
salaries[57]
salaries[57:salaries$adjusted_salaries_2018]
salaries$adjusted_salaries_2018[57]
number_of_raises = sum(salaries$salary_raised == TRUE, rm.NA = TRUE)
number_of_raises
salaries
highest_raise = max(salaries$salary_adjustments)
employee_highest_raise = salaries$employees[which(salaries$salary_adjustments == highest_raise)]
largest_salary_decrease = min(salaries$salary_adjustments)
employee_highest_decrease = salaries$employees[which(salaries$salary_adjustments == largest_salary_decrease)]
avg_salary_adjustment = mean(salaries$salary_adjustments)
avg_loss = mean(salaries$salary_adjustments < 0)
salaries$salary_adjustments < 0
avg_loss = mean(salaries$salary_adjustments > 0)
nums = runif(4, 1, 10)
nums
nums = c(-1, -2. -3. 1, 2, 3)
nums = c(-1, -2, -3, 1, 2, 3)
low_mean = mean(nums > 0)
lows = nums[which(nums < 0)]
lows
avg_loss = mean(salaries$salary_adjustments[which(salaries$salary_adjustments < 0)])
avg_loss
avg_salary_adjustment = mean(salaries$salary_adjustments)
write.csv(salaries, file = "Salary_Data.csv")
getwd()
setwd("~/R Programming/Assignment 3")
write.csv(salaries, file = "Salary_Data.csv")
data("USPersonalExpenditure")
is.data.frame(USPersonalExpenditure)
USPersonalExpenditure_DF = data.frame(USPersonalExpenditure)
colnames(USPersonalExpenditure_DF)
rownames(USPersonalExpenditure_DF)
USPersonalExpenditure_DF$category = rownames(USPersonalExpenditure_DF)
USPersonalExpenditure_DF
USPersonalExpenditure_DF$X1940[which(USPersonalExpenditure_DF$category == "Personal Care")]
USPersonalExpenditure_DF$X1940[which(USPersonalExpenditure_DF$category == "Food and Tobacco")]
USPersonalExpenditure_DF$X1960[which(USPersonalExpenditure_DF$category == "Food and Tobacco")]
max(USPersonalExpenditure_DF$X1960)
lowest_category = function(year)
{}
lowest_category = function(year){return min(USPersonalExpenditure_DF$year)}
lowest_category = function(year){return(min(USPersonalExpenditure_DF$year))}
lowest_category(x1940)
lowest_category = function(year){}
lowest_category = function(year){return(USPersonalExpenditure_DF$category[which(min(year))])}
lowest_category(USPersonalExpenditure_DF$X1940)
lowest_category = function(year){return(USPersonalExpenditure_DF$category[which(year == min(year))])}
lowest_category(USPersonalExpenditure_DF$X1940)
USPersonalExpenditure_DF
USPersonalExpenditure_DF[1:5]
USPersonalExpenditure_DF[1,1:5]
colnames(USPersonalExpenditure_DF)[1:5]
sapply(USPersonalExpenditure_DF[1:5], lowest_category)
gates = read.csv("gates_money.csv")
gates
view(gates)
View(gates, "Gates")
organization = gates$organization
organization
is.vector(organization)
organization = c(gates$organization)
organization
organization = gates$organization
class(organization)
organization = as.vector(gates$organization)
organization
is.vector(organization)
mean_grant_value = mean(gates$total_amount)
mean_grant_value
max(gates$total_amount)
max_grant = max(gates$total_amount)
min_grant = min(gates$total_amount)
max_grant_organization = gates$organization[which(gates$total_amount == max_grant)]
min_grant_organization = gates$organization[which(gates$total_amount == min_grant)]
min_grant_organization
max_grant_organization
max_grant_organization = organization[which(gates$total_amount == max_grant)]
max_grant_organization
min_grant_organization = organization[which(gates$total_amount == min_grant)]
min_grant_organization
gates$Grant.start.date
class(gates$Grant.start.date)
gates$start_year
grants_2010 = sum(gates$start_year == 2010)
grants_2010
my_breakfast = c("eggs", "pineapple wedges", "orange juice")
setwd("~/R Programming/Lab 4")
my_lunch = c("water", "pineapple wedges")
meals = c(my_breakfast, my_lunch)
meals
meals$dinner = c("steak", "baked potato")
meals
meals = c(my_breakfast, my_lunch)
meals
meals = list(my_breakfast, my_lunch)
meals
meals$dinner = c("steak", "baked potato")
meals
meals = list(breakfast = my_breakfast, lunch = my_lunch)
meals
meals$dinner = c("steak", "baked_potato")
meals
dinner = meals$dinner
dinner
meals[5] = meals[2]
meals
meals[[5]] = meals[[2]]
meals
early_meals = meals[1:2]
early_meals
early_meals = meals[1,2]
early_meals = meals[1 2]
early_meals = meals[1:2]
lapply(meals, length)
items_ate = list(lapply(meals, length))
items_ate
add_pizza = function(meal){return(append(meal, "pizza"))}
better_meals = lapply(meals, add_pizza)
better_meals
